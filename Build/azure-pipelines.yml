# SSDT Building and testing pipeline
#
# The project is based on the SSDT-With-tSQLt-Template from https://github.com/sanderstad/SSDT-With-tSQLt-Template
#
# By default the Testing stage will use Linux but you can enable the Windows version.
# Keep in mind that the Windows version of the SQL Server container is massive and will probably take 15 minute to load.
#
# The container image used is one I build myself from the SQL Server 2017 CU16 image
# To make it easier to work with it has sqlpackage installed


variables:
  configuration: release
  sqlinstance: localhost
  database: þnameþ
  artifactname: Database

trigger:
- development
- master

stages:
- stage: Build

  jobs:
    - job: 'Solution'

      pool:
        vmImage: vs2017-win2016

      steps:
      - task: VSBuild@1
        displayName: 'Build solution'
        inputs:
          solution: '**\*.sln'
          configuration: $(configuration)

      - task: CopyFiles@2
        displayName: "Copy files to artifact directory"
        inputs:
          Contents: |
            **\$(database)-Tests\bin\$(configuration)\*.*
            **\*.publish.xml
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          FlattenFolders: true
          OverWrite: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: $(artifactname)
          publishLocation: 'Container'
- stage: Test

  jobs:
    - job: 'Linux2017'
      displayName: 'SQL Server 2017'
      variables:
        variables:
        dockerimage: 'sanderstad/sqlserver:sql2017-cu16-cicd-fts'
        dockerpublishport: 1433
        dockername: sql1
        dockersqlpw: 'MyP@ssw0rd'
        dacpacpath: /var/opt/cicd
        testresultpath: $(Build.Repository.LocalPath)/build/sql2017
        dacpacfile: $(dacpacpath)/$(database)-Tests.dacpac
        publishfile: $(dacpacpath)/$(database)-Tests.publish.xml

      pool:
        vmImage: ubuntu-18.04

      steps:
      - task: PowerShell@2
        displayName: 'Prerequisites'
        inputs:
          filePath: '$(Build.Repository.LocalPath)/Build/azure-prerequisites.ps1'

      - task: DownloadBuildArtifacts@0
        displayName: 'Dowload Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: Bash@3
        displayName: 'Start SQL Server Container'
        inputs:
          targetType: 'inline'
          script: |
            docker run --name $(dockername) \
              -e "ACCEPT_EULA=Y" \
              -e "SA_PASSWORD=$(dockersqlpw)" \
              -p $(dockerpublishport):1433 \
              --volume $(System.ArtifactsDirectory)/$(artifactname):/var/opt/cicd \
              -d $(dockerimage)

      - task: PowerShell@2
        displayName: Retrieving docker IP address
        inputs:
          targetType: 'inline'
          script: |
            $ipaddress = docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(dockername)

            if(-not $ipaddress){
              Write-Error "Could not get docker IP address"
            }
            else{
              Write-Host "Ip Address found: $ipaddress"
            }

            Write-Host "##vso[task.setvariable variable=dockerip]$ipaddress"
      - task: Bash@3
        displayName: 'Publish DACPAC'
        inputs:
          targetType: 'inline'
          script: |
            echo 'Get files in directory'
            sudo docker exec $(dockername) bash -c 'ls -la $(dacpacpath)'

            sudo docker exec $(dockername) bash -c '/opt/sqlpackage/sqlpackage /a:Publish /tsn:localhost /tdn:$(database) /tu:sa /tp:"$(dockersqlpw)" /sf:$(dacpacfile) /pr:$(publishfile) /p:IncludeCompositeObjects=true'

      - task: PowerShell@2
        displayName: 'Run Tests'
        inputs:
          filePath: '$(Build.Repository.LocalPath)/Build/azure-validate.ps1'
          arguments: '-SqlInstance "$(sqlinstance)" -SqlPassword "$(dockersqlpw)" -Database $(database) -TestResultPath $(testresultpath) -EnableException'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/TEST-*.xml'
          failTaskOnFailedTests: true
          testRunTitle: 'SQL Server 2017'

    - job: 'Linux2019'
      displayName: 'SQL Server 2019'
      variables:
        variables:
        dockerimage: 'sanderstad/sqlserver:sql2019-ga-cicd-fts'
        dockerpublishport: 1433
        dockername: sql1
        dockersqlpw: 'MyP@ssw0rd'
        dacpacpath: /var/opt/cicd
        testresultpath: $(Build.Repository.LocalPath)/build/sql2019
        dacpacfile: $(dacpacpath)/$(database)-Tests.dacpac
        publishfile: $(dacpacpath)/$(database)-Tests.publish.xml

      pool:
        vmImage: ubuntu-18.04

      steps:
      - task: PowerShell@2
        displayName: 'Prerequisites'
        inputs:
          filePath: '$(Build.Repository.LocalPath)/Build/azure-prerequisites.ps1'

      - task: DownloadBuildArtifacts@0
        displayName: 'Dowload Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: Bash@3
        displayName: 'Start SQL Server Container'
        inputs:
          targetType: 'inline'
          script: |
            docker run --name $(dockername) \
              -e "ACCEPT_EULA=Y" \
              -e "SA_PASSWORD=$(dockersqlpw)" \
              -p $(dockerpublishport):1433 \
              --volume $(System.ArtifactsDirectory)/$(artifactname):/var/opt/cicd \
              -d $(dockerimage)

      - task: PowerShell@2
        displayName: Retrieving docker IP address
        inputs:
          targetType: 'inline'
          script: |
            $ipaddress = docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(dockername)

            if(-not $ipaddress){
              Write-Error "Could not get docker IP address"
            }
            else{
              Write-Host "Ip Address found: $ipaddress"
            }

            Write-Host "##vso[task.setvariable variable=dockerip]$ipaddress"

      - task: Bash@3
        displayName: 'Publish DACPAC'
        inputs:
          targetType: 'inline'
          script: |
            echo 'Get files in directory'
            docker exec $(dockername) bash -c 'ls -la $(dacpacpath)'

            docker exec $(dockername) bash -c '/opt/sqlpackage/sqlpackage /a:Publish /tsn:localhost /tdn:$(database) /tu:sa /tp:"$(dockersqlpw)" /sf:$(dacpacfile) /pr:$(publishfile) /p:IncludeCompositeObjects=true'

      - task: PowerShell@2
        displayName: 'Run Tests'
        inputs:
          filePath: '$(Build.Repository.LocalPath)/Build/azure-validate.ps1'
          arguments: '-SqlInstance "$(sqlinstance)" -SqlPassword "$(dockersqlpw)" -Database $(database) -TestResultPath $(testresultpath) -EnableException'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/TEST-*.xml'
          failTaskOnFailedTests: true
          testRunTitle: 'SQL Server 2019'

#      - task: Bash@3
#        displayName: 'Install sqlpackage'
#        inputs:
#          targetType: 'inline'
#          script: |
#            echo 'Creating sqlpackage dir'
#            sudo mkdir $(Build.Repository.LocalPath)/sqlpackage
#
#            # Install sqlpackage
#            echo 'Downloading sqlpackage'
#            sudo wget -q -O $(Build.Repository.LocalPath)/sqlpackage/sqlpackage.zip https://go.microsoft.com/fwlink/?linkid=2108814
#
#            echo 'Extracting sqlpackage.zip'
#            sudo unzip -qq $(Build.Repository.LocalPath)/sqlpackage/sqlpackage.zip -d /$(Build.Repository.LocalPath)/sqlpackage
#
#            echo 'Changing sqlpackage permissions'
#            sudo chmod +x $(Build.Repository.LocalPath)/sqlpackage/sqlpackage

#    - job: 'TestWindows'
#      variables:
#        dockerimage: 'microsoft/mssql-server-windows-developer'
#        dockerpublishport: 1433
#        dockersqlpw: '<YourStrong@Passw0rd>'
#        testresultpath: $(Build.Repository.LocalPath)\build
#        dacpacfile: $(System.ArtifactsDirectory)\$(artifactname)\$(database)-Tests.dacpac
#        publishfile: $(System.ArtifactsDirectory)\$(artifactname)\$(database)-Tests.publish.xml

#      pool:
#        vmImage: vs2017-win2016

#      steps:
#        - task: PowerShell@2
#          displayName: 'Prerequisites'
#          inputs:
#            filePath: '$(Build.Repository.LocalPath)/build/azure-prerequisites.ps1'

#        - task: DownloadBuildArtifacts@0
#          displayName: 'Dowload Artifacts'
#          inputs:
#            buildType: 'current'
#            downloadType: 'specific'
#            downloadPath: '$(System.ArtifactsDirectory)'

#        - task: Bash@3
#          displayName: 'Start SQL Server Container'
#          inputs:
#            targetType: 'inline'
#            script: 'docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=$(dockersqlpw)" -p $(dockerpublishport):1433 --name $(sqlinstance) -d $(dockerimage)'

#        - task: PowerShell@2
#          displayName: 'Publish DACPAC'
#          inputs:
#            filePath: '$(Build.Repository.LocalPath)/build/azure-publishdacpac.ps1'
#            arguments: '-SqlInstance "$(sqlinstance),$(dockerpublishport)" -SqlPassword "$(dockersqlpw)" -Database $(database) -DacPacFile "$(dacpacfile)" -PublishXmlFile "$(publishfile)" -EnableException'
#            failOnStderr: true

#        - task: PowerShell@2
#          displayName: 'Run Tests'
#          inputs:
#            filePath: '$(Build.Repository.LocalPath)/build/azure-validate.ps1'
#            arguments: '-SqlInstance "$(sqlinstance)" -SqlPassword "$(dockersqlpw)" -Database $(database) -TestResultPath $(testresultpath) -EnableException'

#        - task: PublishTestResults@2
#          inputs:
#            testResultsFormat: 'JUnit'
#            testResultsFiles: '**/TEST-*.xml'
#            failTaskOnFailedTests: true



